import de.undercouch.gradle.tasks.download.Download

buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath 'de.undercouch:gradle-download-task:3.4.3'
    }
}

plugins {
    id("kotlin")
    id("kotlinx-serialization")
}

configurations {
    toDownload
    kotlinJsLibs
}

compileTestKotlin {
    kotlinOptions.jvmTarget = "1.8"
}

def DEF_TYPE_CHANGESET = '31929c09c7b4490f87766206b412da4a6a581dc3'
def DEF_TYPE_DIR = "${rootProject.gradle.gradleUserHomeDir}/definitelyTyped/DefinitelyTyped-${DEF_TYPE_CHANGESET}/types"

def TOPN_DIR = "${project.projectDir}/test/data/topN"
def TOPN_TARGET_DIR = "${project.buildDir}/tests/topN"

dependencies {
    implementation 'org.jetbrains.kotlin:kotlin-stdlib-jdk8'

    implementation(project(":ast-common"))
    implementation(project(":ast-model"))
    implementation(project(":descriptors"))
    implementation(project(":idl-declarations"))
    implementation(project(":idl-lowerings"))
    implementation(project(":idl-models"))
    implementation(project(":idl-parser"))
    implementation(project(":idl-reference-resolver"))
    implementation(project(":itertools"))
    implementation(project(":js-type-analysis"))
    implementation(project(":js-translator"))
    implementation(project(":logging"))
    implementation(project(":model-lowerings"))
    implementation(project(":model-lowerings-common"))
    implementation(project(":module-name-resolver"))
    implementation(project(":ownerContext"))
    implementation(project(":panic"))
    implementation(project(":translator"))
    implementation(project(":translator-string"))
    implementation(project(":ts-ast-declarations"))
    implementation(project(":ts-lowerings"))
    implementation(project(":ts-model"))
    implementation(project(":ts-node-introduction"))
    implementation(project(":ts-node-lowering"))
    implementation(project(":ts-translator"))

    runtime 'org.jetbrains.kotlin:kotlin-reflect'
    compile 'org.jetbrains.kotlin:kotlin-reflect'

    testImplementation 'org.jetbrains.kotlin:kotlin-reflect'

    testImplementation 'org.jetbrains.kotlin:kotlin-test-common'
    testImplementation 'org.jetbrains.kotlin:kotlin-test-annotations-common'
    testImplementation 'org.jetbrains.kotlin:kotlin-test'

    // without this dependency one won't see "Click to see difference" in IDEA
    testImplementation 'org.jetbrains.kotlin:kotlin-test-junit5'

    testImplementation "org.junit.jupiter:junit-jupiter-params:${gradle.jupiterVersion}"
    testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:${gradle.jupiterVersion}"

    testImplementation "org.jetbrains.kotlin:kotlin-gradle-plugin"
    implementation "org.jetbrains.kotlin:kotlin-compiler-embeddable"

    testImplementation "org.jetbrains.kotlinx:kotlinx-serialization-runtime:${gradle.kotlinSerializationRuntimeVersion}"

    compile(project(path: ":ts-converter", configuration: 'dukatTsResources'))

    testImplementation(project(":command-line"))

    kotlinJsLibs("org.jetbrains.kotlin:kotlin-stdlib-js:${gradle.kotlinVersion}")

    toDownload 'org.jetbrains.kotlin:kotlin-stdlib-js'
}

def getTsDependency() {
    return zipTree(project(":ts-converter").getTasksByName("createJar", true).archivePath[0])
}

processResources {
    dependsOn = [":ts-converter:createJar"]
    from(getTsDependency()) {
        into "/"
    }
}

task propagateToIdeaRuntime(type: Copy) {
    dependsOn = [":ts-converter:createJar"]

    from(getTsDependency())
    into "out/production/resources/"
}

compileTestKotlin.dependsOn = ["propagateToIdeaRuntime"]

task download(type: Copy) {
    from configurations.toDownload
    into "${project.buildDir}/lib"
    rename "kotlin-stdlib-js-${gradle.kotlinVersion}.jar", "kotlin-stdlib-js.jar"
}

task downloadDist(type: Copy) {
    from configurations.toDownload
    into "$rootDir/compiler/dist/kotlinc/lib"
    rename "kotlin-stdlib-js-${gradle.kotlinVersion}.jar", "kotlin-stdlib-js.jar"
}


task downloadDefinitelyTyped(type: Download) {
    onlyIfModified true
    overwrite false
    src "https://github.com/DefinitelyTyped/DefinitelyTyped/archive/${DEF_TYPE_CHANGESET}.zip"
    dest new File(rootProject.gradle.gradleUserHomeDir, "DefinitelyTyped-${DEF_TYPE_CHANGESET}.zip")
}

task fetchDefinitelyTyped(dependsOn: downloadDefinitelyTyped, type: Copy) {
    onlyIf {
        project.hasProperty("dukat.test.extended")
    }
    from zipTree(downloadDefinitelyTyped.dest)
    into "${rootProject.gradle.gradleUserHomeDir}/definitelyTyped"
}

task extractKoltinJsLibs(type: Copy) {
    configurations.kotlinJsLibs.each {
        from it.absolutePath
    }
    into "${project.buildDir}/kotlinHome"
    rename { String fileName ->
        return fileName.replace("-${gradle.kotlinVersion}.jar", ".jar")
    }
}

task prepareTopNPackage(type: Copy) {
    from "${TOPN_DIR}/package.template.json"
    into TOPN_TARGET_DIR

    from "${TOPN_DIR}/package-lock.json"
    into TOPN_TARGET_DIR

    rename { String fileName -> fileName.replace(".template", "") }
}

task installTopNConfig {
    doLast {
        installTopN.commandLine  project(":node-distrib").config.nodePath, project(":node-distrib").config.npmPath, "install"
    }
}
task installTopN(dependsOn: [prepareTopNPackage, installTopNConfig], type: Exec) {
    onlyIf {
        project.hasProperty("dukat.test.extended.topn")
    }
    workingDir TOPN_TARGET_DIR
}

task prebuild {
    dependsOn = ["testClasses", ":node-package:buildDistrib"]
}

//TODO: having download and downloadDist is a shame
test.dependsOn = [
        download,
        downloadDist,
        fetchDefinitelyTyped,
        installTopN,
        extractKoltinJsLibs,
        ":node-package:nodeEnv",
        ":node-package:buildDistrib"
]

test {
    [
            "dukat.test.extended",
            "dukat.test.extended.topn",
            "dukat.test.cli",
            "dukat.test.failure.always",
            "dukat.test.emitTsDiagnostics",
            "dukat.test.descriptorCompilation",
            "dukat.test.typescriptDukat"
    ].forEach { String projectProperty ->
        if (project.hasProperty(projectProperty)) {
            systemProperty(projectProperty, "true")
        }
    }

    [
            "org.slf4j.simpleLogger.defaultLogLevel",
            "dukat.test.definitelyTyped.repexp",
    ].forEach { String projectProperty ->
        if (project.hasProperty(projectProperty)) {
            systemProperty(projectProperty, project.getProperty(projectProperty))
        }
    }

    systemProperty("dukat.test.resources.definitelyTyped", DEF_TYPE_DIR)
    systemProperty("dukat.test.resources.topN", TOPN_TARGET_DIR)

    System.properties.each { key, value ->
         if (key.startsWith("junit.")) {
            systemProperty(key, value)
         }
    }

    /*
        execute top-level classes in sequentially but their methods in parallel
        see https://junit.org/junit5/docs/5.5.1/user-guide/index.html#writing-tests-parallel-execution
    */
    systemProperty("junit.jupiter.execution.parallel.mode.default", "concurrent")
    systemProperty("junit.jupiter.execution.parallel.mode.classes.default", "concurrent")

    testLogging {
        showStandardStreams = true
    }

    if (project.hasProperty('coreTests')) {
        exclude "**/CoreSetCliTests*"
    }
}
